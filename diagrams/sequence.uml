@startuml
title Check-in Sequence
actor Client


Client -> API : list-available-seats
activate API
API -> FlightService : listAvailableSeats
activate FlightService
FlightService -> SeatModel : query
activate SeatModel
SeatModel --> FlightService : result
deactivate SeatModel
FlightService --> API : result
deactivate FlightService
API --> Client : availableSeats
deactivate API

Client -> API : reserve-seat
activate API
API -> AllocationService : reserve(flightId, passengerId, seatId)
activate AllocationService
AllocationService -> SeatModel : fetch the seat
activate SeatModel
SeatModel --> AllocationService : <<Seat Record>>
deactivate SeatModel
AllocationService -> ReservationModel : create a reservation
activate ReservationModel
alt success
  ReservationModel --> AllocationService : <<Reservation Record>>
else error
  ReservationModel --> AllocationService : error
  deactivate ReservationModel
  note over AllocationService: Break on error.\nThe seat is not available or\nuser has other reservations.
end
AllocationService -> SeatModel : update as unavailable
activate SeatModel
SeatModel --> AllocationService : result
deactivate SeatModel
AllocationService --> API : <<Reservation Record>>
deactivate AllocationService
API --> Client : <<Reservation Record>>
deactivate API


Client -> API : check-in
activate API
API -> CheckInService : checkIn
activate CheckInService
CheckInService -> PassengerModel : query
activate PassengerModel
PassengerModel --> CheckInService : <<Passenger>>
deactivate PassengerModel
alt seat choosen
  CheckInService -> AllocationService : reserve
  activate AllocationService
  AllocationService -> SeatModel : fetch seat
  activate SeatModel
  SeatModel --> AllocationService : <<Seat Record>>
  deactivate SeatModel
else no seat chosen
  CheckInService -> AllocationService : reserveRandom
  AllocationService -> FlightService : listAvailableSeats
  activate FlightService
  FlightService --> AllocationService : availableSeats
  deactivate FlightService
  note over AllocationService: Choose a seat from the available ones
end
AllocationService -> ReservationModel: create
activate ReservationModel
ReservationModel --> AllocationService : <<Reservation Record>>
deactivate ReservationModel
AllocationService --> CheckInService : <<Reservation Record>>
deactivate AllocationService
note over CheckInService: Break on reservation error.\nThe seat is not available.
CheckInService -> CheckInService : checkEnoughFunda
activate CheckInService
note over CheckInService: Break if not enough funds
deactivate CheckInService


CheckInService -> CheckInModel : <<checkIn>> state: STARTED
activate CheckInModel
CheckInModel --> CheckInService : result
deactivate CheckInModel
note over CheckInService: Break on error.\nThe seat is not available any more or\nthere is another check-in process for the same user.

CheckInService -> PassengerService : processCheckIn
activate PassengerService
note over PassengerService: Subtract the price from user's balance
PassengerService -> PassengerModel : update
activate PassengerModel
PassengerModel --> PassengerService : result
deactivate PassengerModel
PassengerService --> CheckInService : result
deactivate PassengerService
note over CheckInService : Break on error.\nThe user does not have enough funds any more.

CheckInService -> CheckInModel : update <<checkIn>> state: COMPLETED
activate CheckInModel
CheckInModel --> CheckInService : <<CheckIn Record>>
deactivate CheckInModel

CheckInService -> ReservationModel : delete
activate ReservationModel
ReservationModel --> CheckInService : result
deactivate ReservationModel

CheckInService --> API : <<CheckIn Record>>
deactivate CheckInService
API --> Client : <<CheckIn Record>>
deactivate API


@enduml
