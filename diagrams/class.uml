@startuml

class Passenger {
    +id
    +name
    +balance
}

class Flight {
    +id
    +planeModel
}

class Seat {
    +id
    +location
    +available
    +cost
    +type
    +flightId
}

enum SeatTypes {
    REGULAR
    WINDOW
    AISLE
    FIRE_EXIT
    BUSINESS
    EXTRA_ROOM
}
Seat--SeatTypes

class CheckIn {
    +id
    +flightId
    +passengerId
    +seatId
    +state
    +cost
    +createdAt
    +lastModifiedAt
}

enum CheckInStates {
    STARTED
    CANCELLED
    COMPLETED
    TIMEDOUT
}
CheckIn--CheckInStates

class Reservation {
    +id
    +flightId
    +seatId
    +passengerId
    +cost
    +createdAt
}

class CheckInService {
    +checkin(flightId, passengerId, seatId)
}
CheckInService ..> PassengerService : uses
CheckInService ..> AllocationService : uses

CheckInService o--> Passenger : manages
CheckInService o--> CheckIn : manages
CheckInService o--> Reservation : manages



class AllocationService {
    +reserve(flightId, passengerId, seatId)
    -reserveRandom(flightId, passengerId)
}
AllocationService ..> FlightService : uses

AllocationService o--> Seat : manages
AllocationService o--> Reservation : manages


class PassengerService {
    -processCheckIn(<<checkInRecord>>)
}
PassengerService o--> Passenger : manages


class FlightService {
    +list()
    +listAvailableSeats(flightId)
}

Passenger -* CheckIn
Passenger -* Reservation
Flight -* CheckIn
Flight "1" -- "1..N" Seat
CheckIn "1" -> "0..1" Seat

@enduml
